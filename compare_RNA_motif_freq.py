import os
import argparse
import pickle
from collections import Counter
import matplotlib.pyplot as plt

__author__ = "Sihao Huang"
__copyright__ = ""
__credits__ = []
__license__ = "GPL 2.0"
__version__ = "0.1"
__maintainer__ = "Sihao Huang"
__email__ = "sihaohuang1024@gmail.com"
__status__ = "Development"


def make_all_capital(in_dict):
    for key in in_dict.keys():
        in_dict[key]=in_dict[key].upper()
    return in_dict

def count_freq(in_dict,search_len):
    frag_list=[]
    for key in in_dict.keys():
        for i in range(len(in_dict[key])+1-search_len):
            frag_list.append(in_dict[key][i:(i+search_len)])
    return Counter(frag_list)

def draw_bar_according_to_first_file_order(in_dict1,in_dict2,out_figure_name):
    sorted_dict1=sorted(in_dict1.items(),key=lambda x:x[1],reverse=True)
    num_bar=10
    bin_width=0.4
    x=[i for i in range(num_bar)]
    x1=[i-0.5*bin_width for i in range(num_bar)]
    x2=[i+0.5*bin_width for i in range(num_bar)]
    y1=[]
    y2=[]
    x_label=[]
    for i,item in enumerate(sorted_dict1):
        if i<num_bar:
            y1.append(item[1])
            y2.append(in_dict2[item[0]])
            x_label.append(item[0])

    plt.figure(figsize=(5,3.5))
    plt.bar(x1,height=y1,width=0.4,alpha=1,color="#C0C000")
    plt.bar(x2,height=y2,width=0.4,alpha=1,color="#A000A0")
    plt.xticks(x,x_label,size=15,rotation=75)
    plt.yticks(size=15)
    plt.ylabel("Count",size=20)
    for position,value in zip(x1,y1):
        plt.text(x=position,y=value,s=value,ha="center",va="bottom",size=15)
    for position,value in zip(x2,y2):  
        plt.text(x=position,y=value,s=value,ha="center",va="bottom",size=15)
    plt.tight_layout()
    plt.savefig(out_figure_name,dpi=100)
    plt.show()

if __name__=="__main__":
    working_path=os.getcwd()
    p=argparse.ArgumentParser(description="This file is used to compare the frequency of motifs in two files. It will show the 10 motifs of assigned length that are mostly enriched in reads in file 1 and its corresponding frequency in file 2. Reverse complementary strand is not considered.")
    p.add_argument("--prepared_reference1","-p1",required=True,type=str,help="The first file generated by 'prepare_the_reference.py'.")
    p.add_argument("--prepared_reference2","-p2",required=True,type=str,help="The second file generated by 'prepare_the_reference.py'.")
    p.add_argument("--search_length","-sl",required=True,type=str,help="The length of the fragment to search.")
    p.add_argument("--out_figure_name","-ofn",type=str,help="The name of the output figure.")

    args=p.parse_args()
    if args.search_length:
        search_len=int(args.search_length)
    else:
        print("Search length error.")

    if args.out_figure_name:
        out_figure_name=args.out_figure_name
    else:
        out_figure_name="1.png"

    if args.prepared_reference1 and args.prepared_reference2:
        in_file_name1=args.prepared_reference1
        in_file_name2=args.prepared_reference2
        if in_file_name1.split(".")[-1]=="pkl" and in_file_name2.split(".")[-1]=="pkl":
            in_anno1=working_path+"/"+in_file_name1
            in_anno2=working_path+"/"+in_file_name2
            all_ref1=make_all_capital(pickle.load(open(in_anno1,"rb")))
            all_ref2=make_all_capital(pickle.load(open(in_anno2,"rb")))

            freq1=count_freq(all_ref1,search_len)
            freq2=count_freq(all_ref2,search_len)

            draw_bar_according_to_first_file_order(freq1,freq2,out_figure_name)
    else:
        print("Input error.")
    